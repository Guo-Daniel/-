package com.wc.designpattern.observable;

import java.util.Observable;
import java.util.Observer;

public class ObservablePatternApplication {

    static class Subject extends Observable {
        private Integer state;

        public Integer getState() {
            return state;
        }

        public Subject(Integer state) {
            this.state = state;
        }

        public void setState(Integer state) {
            //在这里状态就改变了
            this.state = state;
            //这里状态发生改变之后，要通知关联的一些观察者，说状态发生了改变
            this.setChanged();
            this.notifyObservers();
        }
    }

    static class ConcreteObserver implements Observer {

        @Override
        public void update(Observable o, Object arg) {
            Subject subject = (Subject) o;
            Integer state = subject.getState();
            System.out.println("目标对象的状态已经改变为：" + state);
        }
    }

    public static void main(String[] args) {
        Subject subject = new Subject(0);
        Observer observer = new ConcreteObserver();
        subject.addObserver(observer);

        subject.setState(5);
        subject.setState(2);
    }
}
